diff -urN LASPACK.orig/laspack/operats.c LASPACK.blas/laspack/operats.c
--- LASPACK.orig/laspack/operats.c	1995-06-13 13:46:46.000000000 +0200
+++ LASPACK.blas/laspack/operats.c	2004-12-14 03:22:21.800905624 +0100
@@ -16,6 +16,9 @@
 #include <stddef.h>
 #include <math.h>
 #include <string.h>
+#ifdef HAVE_BLAS
+#include <acml.h> /* BLAS implementation by AMD */
+#endif
 
 #include "laspack/operats.h"
 #include "laspack/errhandl.h"
@@ -47,8 +50,12 @@
             V2Cmp = V2->Cmp;
             if (V2->Instance == Normal) {
                 Dim = V1->Dim;
+#ifdef HAVE_BLAS
+		dcopy(Dim, V2Cmp, 1, V1Cmp, 1);
+#else
                 for_AllCmp
 		    V1Cmp[Ind] = V2Cmp[Ind];
+#endif
             } else {
                 if (V2->OwnData) {
                     V1->Cmp = V2Cmp;
@@ -56,13 +63,22 @@
                 } else {
                     if (IsOne(V2->Multipl)) {
                         Dim = V1->Dim;
+#ifdef HAVE_BLAS
+			dcopy(Dim, V2Cmp, 1, V1Cmp, 1);
+#else
                         for_AllCmp
 			    V1Cmp[Ind] = V2Cmp[Ind];
+#endif
                     } else {
                         Dim = V1->Dim;
                         Multipl = V2->Multipl;
+#ifdef HAVE_BLAS
+			dcopy(Dim, V2Cmp, 1, V1Cmp, 1);
+			dscal(Dim, Multipl, V1Cmp, 1);
+#else
                         for_AllCmp
 			    V1Cmp[Ind] = Multipl * V2Cmp[Ind];
+#endif
                     }
                 }
             }
@@ -102,12 +118,20 @@
             V1Cmp = V1->Cmp;
             V2Cmp = V2->Cmp;
             if (IsOne(V2->Multipl)) {
+#ifdef HAVE_BLAS
+		    daxpy(Dim, 1.0, V2Cmp, 1, V1Cmp, 1);
+#else		  
 	       for_AllCmp
 		    V1Cmp[Ind] += V2Cmp[Ind];
+#endif
             } else {
                 Multipl = V2->Multipl;
+#ifdef HAVE_BLAS
+		daxpy(Dim, Multipl, V2Cmp, 1, V1Cmp, 1);
+#else
                 for_AllCmp
 		    V1Cmp[Ind] += Multipl * V2Cmp[Ind];
+#endif
             }
             VRes = V1;
         } else {
@@ -145,12 +169,20 @@
             V1Cmp = V1->Cmp;
             V2Cmp = V2->Cmp;
             if (IsOne(V2->Multipl)) {
+#ifdef HAVE_BLAS
+		    daxpy(Dim, -1.0, V2Cmp, 1, V1Cmp, 1);
+#else
 	       for_AllCmp
 		    V1Cmp[Ind] -= V2Cmp[Ind];
+#endif
             } else {
                 Multipl = V2->Multipl;
+#ifdef HAVE_BLAS
+		daxpy(Dim, -Multipl, V2Cmp, 1, V1Cmp, 1);
+#else
                 for_AllCmp
 		    V1Cmp[Ind] -= Multipl * V2Cmp[Ind];
+#endif
             }
             VRes = V1;
         } else {
@@ -184,8 +216,12 @@
         if (V->Instance == Normal) {
             Dim = V->Dim;
             VCmp = V->Cmp;
+#ifdef HAVE_BLAS
+	    dscal(Dim, S, VCmp, 1);
+#else
             for_AllCmp
 	        VCmp[Ind] *= S;
+#endif
             VRes = V;
         } else {
             LASError(LASLValErr, "MulAsgn_VS", V_GetName(V), NULL, NULL);
@@ -228,22 +264,43 @@
                     VResCmp = VRes->Cmp;
                     if (IsOne(V1->Multipl)) {
                         if (IsOne(V2->Multipl)) {
+#ifdef HAVE_BLAS
+				dcopy(Dim, V1Cmp, 1, VResCmp, 1);
+				daxpy(Dim, 1.0, V2Cmp, 1, VResCmp, 1);
+#else
 			   for_AllCmp
 			        VResCmp[Ind] = V1Cmp[Ind] + V2Cmp[Ind];
+#endif
                         } else {
                             Multipl2 = V2->Multipl;
+#ifdef HAVE_BLAS
+			    dcopy(Dim, V1Cmp, 1, VResCmp, 1);
+			    daxpy(Dim, Multipl2, V2Cmp, 1, VResCmp, 1);
+#else
                             for_AllCmp
 			        VResCmp[Ind] = V1Cmp[Ind] + Multipl2 * V2Cmp[Ind];
+#endif
                         }
                     } else {
                         Multipl1 = V1->Multipl;
                         if (IsOne(V2->Multipl)) {
+#ifdef HAVE_BLAS
+				dcopy(Dim, V2Cmp, 1, VResCmp, 1);
+				daxpy(Dim, Multipl1, V1Cmp, 1, VResCmp, 1);
+#else
 			   for_AllCmp
 			       VResCmp[Ind] = Multipl1 * V1Cmp[Ind] + V2Cmp[Ind];
+#endif
                         } else {
                             Multipl2 = V2->Multipl;
+#ifdef HAVE_BLAS
+			    dcopy(Dim, V1Cmp, 1, VResCmp, 1);
+			    dscal(Dim, Multipl1, VResCmp, 1);
+			    daxpy(Dim, Multipl2, V2Cmp, 1, VResCmp, 1);
+#else
                             for_AllCmp
 			        VResCmp[Ind] = Multipl1 * V1Cmp[Ind] + Multipl2 * V2Cmp[Ind];
+#endif
                         }
                     }
                 }
@@ -364,22 +421,44 @@
                     VResCmp = VRes->Cmp;
                     if (IsOne(V1->Multipl)) {
                         if (IsOne(V2->Multipl)) {
+#ifdef HAVE_BLAS
+				dcopy(Dim, V1Cmp, 1, VResCmp, 1);
+				daxpy(Dim, -1.0, V2Cmp, 1, VResCmp, 1);
+#else
 			   for_AllCmp
 			        VResCmp[Ind] = V1Cmp[Ind] - V2Cmp[Ind];
+#endif
                         } else {
                             Multipl2 = V2->Multipl;
+#ifdef HAVE_BLAS
+				dcopy(Dim, V1Cmp, 1, VResCmp, 1);
+				daxpy(Dim, -Multipl2, V2Cmp, 1, VResCmp, 1);
+#else
                             for_AllCmp
 			        VResCmp[Ind] = V1Cmp[Ind] - Multipl2 * V2Cmp[Ind];
+#endif
                         }
                     } else {
                         Multipl1 = V1->Multipl;
                         if (IsOne(V2->Multipl)) {
+#ifdef HAVE_BLAS
+				dcopy(Dim, V1Cmp, 1, VResCmp, 1);
+				dscal(Dim, Multipl1, VResCmp, 1);
+				daxpy(Dim, -1.0, V2Cmp, 1, VResCmp, 1);
+#else
 			   for_AllCmp
 			        VResCmp[Ind] = Multipl1 * V1Cmp[Ind] - V2Cmp[Ind];
+#endif
                         } else {
                             Multipl2 = V2->Multipl;
+#ifdef HAVE_BLAS
+				dcopy(Dim, V1Cmp, 1, VResCmp, 1);
+				dscal(Dim, Multipl1, VResCmp, 1);
+				daxpy(Dim, -Multipl2, V2Cmp, 1, VResCmp, 1);
+#else
                             for_AllCmp
 			        VResCmp[Ind] = Multipl1 * V1Cmp[Ind] - Multipl2 * V2Cmp[Ind];
+#endif
                         }
                     }
                 }
@@ -620,9 +699,13 @@
             Dim = V1->Dim;
             V1Cmp = V1->Cmp;
             V2Cmp = V2->Cmp;
+#ifdef HAVE_BLAS
+	    SRes = ddot(Dim, V1Cmp, 1, V2Cmp, 1);
+#else
             SRes = 0.0;
             for_AllCmp
 	        SRes += V1Cmp[Ind] * V2Cmp[Ind];
+#endif
 	    SRes *= V1->Multipl * V2->Multipl;
         } else {
             LASError(LASDimErr, "Mul_VV", V_GetName(V1),  V_GetName(V2), NULL);
@@ -1505,9 +1588,13 @@
     if (LASResult() == LASOK) {
 	Dim = V->Dim;
         VCmp = V->Cmp;
+#ifdef HAVE_BLAS
+	Sum = dasum(Dim, VCmp, 1);
+#else
 	Sum = 0.0;
 	for_AllCmp
 	   Sum += fabs(VCmp[Ind]);
+#endif
         Sum *= V->Multipl;
 	SRes = Sum;
     } else {
@@ -1533,6 +1620,10 @@
     if (LASResult() == LASOK) {
 	Dim = V->Dim;
         VCmp = V->Cmp;
+#ifdef HAVE_BLAS
+	Sum = dnrm2(Dim, VCmp, 1);
+	SRes = Sum*V->Multipl;
+#else
 	Sum = 0.0;
 	for_AllCmp {
 	    Cmp = VCmp[Ind];
@@ -1540,6 +1631,7 @@
 	}
         Sum *= V->Multipl * V->Multipl;
 	SRes = sqrt(Sum);
+#endif
     } else {
 	SRes = 1.0;
     }
@@ -1563,12 +1655,16 @@
     if (LASResult() == LASOK) {
 	Dim = V->Dim;
         VCmp = V->Cmp;
+#ifdef HAVE_BLAS
+	MaxCmp = idamax(Dim, VCmp, 1);
+#else
 	MaxCmp = 0.0;
 	for_AllCmp {
 	   Cmp = fabs(VCmp[Ind]);
 	   if (Cmp > MaxCmp) 
 	       MaxCmp = Cmp;
 	}
+#endif
         MaxCmp *= V->Multipl;
 	SRes = MaxCmp;
     } else {
@@ -1606,11 +1702,16 @@
    	            for_AllCmp 
 	                VCmp[Ind] -= Mean;
                 } else {
+#ifdef HAVE_BLAS
+			Sum = ddot(Dim, VCmp, 1, KerCmp, 1);
+			daxpy(Dim, - Sum, KerCmp, 1, VCmp, 1);
+#else
 	            Sum = 0.0;
    	            for_AllCmp
 	                Sum += VCmp[Ind] * KerCmp[Ind];
    	            for_AllCmp 
 	                VCmp[Ind] -= Sum * KerCmp[Ind];
+#endif
     	        }	   
 	   	    
                 VRes = V;
@@ -1662,11 +1763,16 @@
    	            for_AllCmp 
 	                VCmp[Ind] -= Mean;
                 } else {
+#ifdef HAVE_BLAS
+			Sum = ddot(Dim, VCmp, 1, KerCmp, 1);
+			daxpy(Dim, - Sum, KerCmp, 1, VCmp, 1);
+#else
 	            Sum = 0.0;
    	            for_AllCmp
 	                Sum += VCmp[Ind] * KerCmp[Ind];
    	            for_AllCmp 
 	                VCmp[Ind] -= Sum * KerCmp[Ind];
+#endif
     	        }	   
 	   	    
                 VRes = V;
